# Generated 2025-05-11 from:
# /nas-ctm01/homes/dpmoura/speech/train.yaml
# yamllint disable
# #################################
# Basic training parameters for speaker-id. We have first a network that
# computes some embeddings. On the top of that, we employ a classifier.
#
# Author:
#  * Mirco Ravanelli 2021
# #################################

# Seed needs to be set at top of yaml, before objects with parameters are made
seed: 1986
__set_seed: !apply:speechbrain.utils.seed_everything [1986]

# If you plan to train a system on an HPC cluster with a big dataset,
# we strongly suggest doing the following:
# 1- Compress the dataset in a single tar or zip file.
# 2- Copy your dataset locally (i.e., the local disk of the computing node).
# 3- Uncompress the dataset in the local folder.
# 4- Set data_folder with the local path.
# Reading data from the local disk of the compute node (e.g. $SLURM_TMPDIR with SLURM-based clusters) is very important.
# It allows you to read the data much faster without slowing down the shared filesystem.
data_folder: ./data
output_folder: ./results/speaker_id/1986
save_folder: ./results/speaker_id/1986/save
train_log: ./results/speaker_id/1986/train_log.txt

# Path where data manifest files will be stored
# The data manifest files are created by the data preparation script.
train_annotation: train.json
valid_annotation: valid.json
test_annotation: test.json
split_ratio: [80, 10, 10]
skip_prep: false

# Data for augmentation
data_folder_noise: ./data/noise             # The noisy sequences for data augmentation will automatically be downloaded here.
NOISE_DATASET_URL: 
  https://www.dropbox.com/scl/fi/a09pj97s5ifan81dqhi4n/noises.zip?rlkey=j8b0n9kdjdr32o1f06t0cw5b7&dl=1
noise_annotation: ./results/speaker_id/1986/save/noise.csv #The data manifest files are created by the data preparation script

# The train logger writes training statistics to a file, as well as stdout.
train_logger: !new:speechbrain.utils.train_logger.FileTrainLogger
  save_file: ./results/speaker_id/1986/train_log.txt

error_stats: !name:speechbrain.utils.metric_stats.MetricStats
  metric: !name:speechbrain.nnet.losses.classification_error
    reduction: batch

ckpt_interval_minutes: 15 # save checkpoint every N min

# Feature parameters
n_mels: 23

# Training Parameters
sample_rate: 16000
number_of_epochs: 35
batch_size: 16
lr_start: 0.001
lr_final: 0.0001
n_classes: 28 # In this case, we have 28 speakers
emb_dim: 512 # dimensionality of the embeddings
num_workers: 4
dataloader_options:
  batch_size: 16
  num_workers: 4


# Download and prepare the dataset of noisy sequences for augmentation
prepare_noise_data: !name:speechbrain.augment.preparation.prepare_dataset_from_URL
  URL: 
    https://www.dropbox.com/scl/fi/a09pj97s5ifan81dqhi4n/noises.zip?rlkey=j8b0n9kdjdr32o1f06t0cw5b7&dl=1
  dest_folder: ./data/noise
  ext: wav
  csv_file: ./results/speaker_id/1986/save/noise.csv


# Add noise to input signal
snr_low: 0  # Min SNR for noise augmentation
snr_high: 15  # Max SNR for noise augmentation

add_noise: &id002 !new:speechbrain.augment.time_domain.AddNoise
  csv_file: ./results/speaker_id/1986/save/noise.csv
  snr_low: 0
  snr_high: 15
  noise_sample_rate: 16000
  clean_sample_rate: 16000
  num_workers: 4

# Speed perturbation
speed_changes: &id001 [95, 100, 105]

# Frequency drop: randomly drops a number of frequency bands to zero.
speed_perturb: &id003 !new:speechbrain.augment.time_domain.SpeedPerturb
  orig_freq: 16000
  speeds: *id001
drop_freq_low: 0  # Min frequency band dropout probability
drop_freq_high: 1  # Max frequency band dropout probability
drop_freq_count_low: 1  # Min number of frequency bands to drop
drop_freq_count_high: 3  # Max number of frequency bands to drop
drop_freq_width: 0.05  # Width of frequency bands to drop

drop_freq: &id004 !new:speechbrain.augment.time_domain.DropFreq
  drop_freq_low: 0
  drop_freq_high: 1
  drop_freq_count_low: 1
  drop_freq_count_high: 3
  drop_freq_width: 0.05

# Time drop: randomly drops a number of temporal chunks.
drop_chunk_count_low: 1  # Min number of audio chunks to drop
drop_chunk_count_high: 5  # Max number of audio chunks to drop
drop_chunk_length_low: 1000  # Min length of audio chunks to drop
drop_chunk_length_high: 2000  # Max length of audio chunks to drop

drop_chunk: &id005 !new:speechbrain.augment.time_domain.DropChunk
  drop_length_low: 1000
  drop_length_high: 2000
  drop_count_low: 1
  drop_count_high: 5

# Augmenter: Combines previously defined augmentations to perform data augmentation
wav_augment: !new:speechbrain.augment.augmenter.Augmenter
  parallel_augment: false
  concat_original: true
  repeat_augment: 1
  shuffle_augmentations: false
  min_augmentations: 4
  max_augmentations: 4
  augment_prob: 1.0
  augmentations: [*id002, *id003, *id004, *id005]

# Feature extraction
compute_features: &id006 !new:speechbrain.lobes.features.Fbank
  n_mels: 23

# Mean and std normalization of the input features
mean_var_norm: &id009 !new:speechbrain.processing.features.InputNormalization

# This optimizer will be constructed by the Brain class after all parameters
# are moved to the correct device. Then it will be added to the checkpointer.
  norm_type: sentence
  std_norm: false

# To design a custom model, either just edit the simple CustomModel
# class that's listed here, or replace this `!new` call with a line
# pointing to a different file you've defined.
embedding_model: &id007 !new:custom_model.Xvector
  in_channels: 23
  activation: !name:torch.nn.LeakyReLU
  tdnn_blocks: 5
  tdnn_channels: [512, 512, 512, 512, 1500]
  tdnn_kernel_sizes: [5, 3, 3, 1, 1]
  tdnn_dilations: [1, 2, 3, 1, 1]
  lin_neurons: 512

classifier: &id008 !new:custom_model.Classifier
  input_shape: [null, null, 512]
  activation: !name:torch.nn.LeakyReLU
  lin_blocks: 1
  lin_neurons: 512
  out_neurons: 28

# The first object passed to the Brain class is this "Epoch Counter"
# which is saved by the Checkpointer so that training can be resumed
# if it gets interrupted at any point.
epoch_counter: &id010 !new:speechbrain.utils.epoch_loop.EpochCounter
  limit: 35

# Objects in "modules" dict will have their parameters moved to the correct
# device, as well as having train()/eval() called on them by the Brain class.
modules:
  compute_features: *id006
  embedding_model: *id007
  classifier: *id008
  mean_var_norm: *id009
opt_class: !name:torch.optim.Adam
  lr: 0.001

# This function manages learning rate annealing over the epochs.
# We here use the simple lr annealing method that linearly decreases
# the lr from the initial value to the final one.
lr_annealing: !new:speechbrain.nnet.schedulers.LinearScheduler
  initial_value: 0.001
  final_value: 0.0001
  epoch_count: 35

# This object is used for saving the state of training both so that it
# can be resumed if it gets interrupted, and also so that the best checkpoint
# can be later loaded for evaluation or inference.
checkpointer: !new:speechbrain.utils.checkpoints.Checkpointer
  checkpoints_dir: ./results/speaker_id/1986/save
  recoverables:
    embedding_model: *id007
    classifier: *id008
    normalizer: *id009
    counter: *id010
